line <- str_c(line, ' ')
}
for(k in i:5){
line <- str_c(line, '#')
}
print(line)
}
for (i in 1:5){
line <- ''
for(k in 1:i){
line <- str_c(line, '#')
}
print(line)
}
for (i in 1:5){
line <- ''
for(k in 1:i){
line <- str_c(line, '#')
}
print(line)
}
ex3(number)
ex3 <- function(x){
if(x-y>0){
return(x-y)
} else if(x-y<0){
return(y-x)
}
}
ex3  <-  function ( x , y ) {
# return (ifelse (x> y, x -, y - x))
if ( x  >  y ) {
return ( x  -  y )
} else {
return ( y  -  x )
}
}
ex3(10,20)
ex3(10,20)
ex3(10,20)
ex3(20,10)
ex3
ex3(10,20)
xx <- c(T, T, F)
yy <- c(F, T, F)
xx & yy
xx && yy
myf4(-1)
myf4(1)
myf4(5)
myf4(6)
xx && yy
myf4 <- function(x){
if(x<0){
return(0)
} else if(x>=1 && x<=5){
return(1)
} else if(x>5){
return(10)
} else {
return(-1)
}
}
myf4(6)
xx <- c(T, T, F)
yy <- c(F, T, F)
xx & yy
xx && yy
myf5(ans)
ans <- scan(what=" ")
myf5(ans)
ans <- scan(what=" ")
myf5(ans)
#5번 문제
myf5 <- function(input){
if(input == 'Y' || input == 'y'){
return('Yes')
} else{
return('Not Yes')
}
}
ans <- scan(what=" ")
myf5(ans)
#5번 문제
myf5 <- function(x){
if(x == 'Y' || x == 'y'){
return('Yes')
} else{
return('Not Yes')
}
}
ans <- scan(what=" ")
myf5(ans)
ans <- scan(what=" ")
myf5(ans)
myRealD  <-  function ( a , b , c ) {
D  =  b * b  -  4 * a * c
print ( D )
if (abs ( D ) <  1e-5 ) {
return ( 1 )
} else  if ( D  >  0 ) {
return ( 2 )
} else {
return ( 0 )
}
}
#추가 문제
#myIntD ->(a,b,c) 정수, myRealD ->(a,b,c) 실수
myIntD  <-  function ( a , b , c ) {
D  =  b * b  -  4 * a * c
if ( D  >  0 ) {
return ( 2 )
} else  if ( D  ==  0 ) {
return ( 1 )
} else {
return ( 0 )
}
}
a  <-  40.0 / 39.9999999999
b  <-  - 2.00000000001
c  <-  1.0000000002
myRealD ( a , b , c )
myIntD ( a , b , c)
myRealD ( a , b , c )
for (i in 1:5){
line <- ''
for(k in 1:i){
line <- str_c(line, '#')
}
print(line)
}
for (i in 2:9){
for(k in 1:9){
print(paste(i, '*', j, '=', i*j))
}
}
for (i in 2:9){
for(k in 1:9){
print(paste(i, "*", j, "=", i*j))
}
}
for (i in 2:9){
for(k in 1:9){
print(paste(i, "*", j, "=", i*j))
}
}
for (i in 2:9){
for(k in 1:9){
print(paste(i, '*', k, '=', i*k))
}
}
for (i in 1:5){
line <- ''
for(k in 1:i){
line <- str_c(line, '#')
}
print(line)
}
for (i in 2:9){
for(k in 1:9){
print(i, '*', k, '=', i*k)
}
}
for (i in 2:9){
for(k in 1:9){
print(i, '*', k, '=', i*k)
}
}
for (i in 2:9){
for(k in 1:9){
print(i, '*', k, '=', i*k)
}
}
for (i in 2:9){
for(k in 1:9){
print(paste(i, '*', k, '=', i*k))
}
}
for (i in 2:9){
for(k in 1:9){
print(paste(i, '*', k, '=', i*k))
}
}
for (i in 1:5){
line <- ''
for(k in 1:i){
line <- str_c(line, '#')
}
print(line)
}
for (i in 1:5){
line <- ''
if(i!=1){
for(k in 1:(i-1))
line <- str_c(line, ' ')
}
for(k in i:5){
line <- str_c(line, '#')
}
print(line)
}
#구구단 2단부터 9단까지 출력
#paste -> 문자열을 붙이는 역할!!!!
for (i in 2:9){
for(k in 1:9){
print(paste(i, '*', k, '=', i*k))
}
}
for (i in 1:7){
line <- ''
if(i!=1){
for(k in 1:(i-1))
line <- str_c(line, ' ')
}
for(k in i:5){
line <- str_c(line, '#')
}
print(line)
}
for (i in 2:9){
for(k in 1:9){
print(paste(i, '*', k, '=', i*k))
}
}
for (i in 1:7){
line <- ''
if(i!=1){
for(k in 1:(i-1))
line <- str_c(line, ' ')
}
for(k in i:7){
line <- str_c(line, '#')
}
print(line)
}
While (T) {
for (i in 1:4){
line <- ''
if(i!=4){
for(k in 1:(3-(i-1)))
line <- str_c(line, ' ')
}
for(k in i:(2*i-1))
line <- str_c(line, '#')
print(line)
}
for (i in 3:1){
line <- ''
}
}
While (T) {
for (i in 1:4){
line <- ''
if(i!=4){
for(k in 1:(3-(i-1)))
line <- str_c(line, ' ')
}
for(k in i:(2*i-1))
line <- str_c(line, '#')
print(line)
}
for (i in 3:1){
line <- ''
for(k in 1:(3-(i-1)))
line <- star
}
}
grep('apple',char)
grep('apple',char)
char <- c('apple', 'Apple', 'APPLE', 'banana', 'grape')
grep('apple',char)
grep(char2, char)
char2 <- c('apple', 'banana')
grep(char2, char)
grep(char2, collapse='|'), char, value=T)
grep(char2, char)
grep(char2, collapse='|'), char, value=T)
grep(paste(char2, collapse='|'), char1, value=T)
grep(char2, char)
grep(paste(char2, collapse='|'), char1, value=T)
grep(paste(char2, collapse='|'), char2, value=T)
grep(paste(char2, collapse='|'), char1, value=T)
grep(paste(char2, collapse='|'), char1, value=T)
grep(paste(char2, collapse='|'), char, value=T)
grep('pp', char)
grep('pp', char, value = T)
grep('^A', char, value = T)
grep('e$', char, value = T)
grep('pp', char, value = T)
grep('pp', char)
char2 <- c('grape1', 'apple1', 'apple', 'orange', 'Apple')
grep('ap', char2, value= T)
grep('[1-9]', char2, value=T)
grep('[[:upper:]]',char2, value=T)
grep('[[:upper:]]',char2, value=T) #대문자가 포함된 단어 찾기
grep('\\d', char2, value=T) # 숫자가 포함된 단어 찾기
grep('[A-Z]',char2, value=T) #대문자가 포함된 단어 찾기
char
nchar(char)
nchar('James Seo')
nchar('서진수')
paste('Seo', 'Jin', 'Su')
paste('Seo', 'Jin', 'Su', sep="")
paste('Seo', 'Jin', 'Su', sep='')
paste('Seo', 'Jin', 'Su', sep='/')
paste('Seo', 'Jin', 'Su')
paste('Seo', 'Jin', 'Su', sep='')
paste('Seo', 'Jin', 'Su', sep='/')
paste('I', '\'m','Hungry')
substr('abc123',3,3)
substr('abc123',3,4)
strsplit('2014/11/22',split='/')
grep('-','010-8706-4712')
regexpr('-','010-8706-4712')
regexpr('-','010-8706-4712')
regexpr('-','010-8706-4712')
attr(,"match.length")
attr(,"match.length")
attr(,"useBytes")
regexpr('-','010-8706-4712') #처음 나오는 '-' 문자 위치 찾기
attr(,"match.length")
attr(,"useBytes")
While (T) {
for (i in 1:4){
line <- ''
if(i!=4){
for(k in 1:(3-(i-1)))
line <- str_c(line, ' ')
}
for(k in i:(2*i-1))
line <- str_c(line, '#')
print(line)
}
for (i in 3:1){
line <- ''
for(k in 1:(3-(i-1)))
line <- star
}
}
for (i in 2:9){
for(k in 1:9){
print(paste(i, '*', k, '=', i*k))
}
}
While (T) {
for (i in 1:4){
line <- ''
if(i!=4){
for(k in 1:(3-(i-1)))
line <- str_c(line, ' ')
}
for(k in i:(2*i-1))
line <- str_c(line, '#')
print(line)
}
for (i in 3:1){
line <- ''
for(k in 1:(3-(i-1)))
line <- star
}
}
While (T) {
for (i in 1:4){
line <- ''
if(i!=4){
for(k in 1:(3-(i-1)))
line <- str_c(line, ' ')
}
for(k in i:(2*i-1))
line <- str_c(line, '#')
print(line)
}
for (i in 3:1) {
line <- ''
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
break;
}
While (T) {
for (i in 1:4){
line <- ''
if(i!=4){
for(k in 1:(3-(i-1)))
line <- str_c(line, ' ')
}
for(k in i:(2*i-1))
line <- str_c(line, '#')
print(line)
}
for (i in 3:1) {
line <- ''
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
break;
}
While (T) {
for (i in 1:4){
line <- ''
if(i!=4){
for(k in 1:(3-(i-1)))
line <- str_c(line, ' ')
}
for(k in i:(2*i-1))
line <- str_c(line, '#')
print(line)
}
for (i in 3:1) {
line <- ''
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
break;
}
while (T) {
for (i in 1:4) {
line <- ''
if (i != 4) {
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
}
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
for (i in 3:1) {
line <- ''
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
break;
}
library(stringr)
while (T) {
for (i in 1:4) {
line <- ''
if (i != 4) {
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
}
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
for (i in 3:1) {
line <- ''
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
break;
}
getDenominator <- function(x) {
den <- c(1)
if (x >= 2) {
for (i in 2:x) {
if (x %% i == 0)
den <- c(den, i)
}
}
return(den)
}
getDenominator(60)
regexpr('-','010-8706-4712') #처음 나오는 '-' 문자 위치 찾기
attr(,"match.length") #오류 확인 필요!!!!!!!!!!!
attr(,"useBytes") #오류 확인 필요!!!!!!!!
getDenominator(60)
sum <- 0
for(i in seq(3,100,3)){
sum <- sum + i
}
print(sum)
for (i in seq(1,0,1)){
print(i)
}
for (i in seq(1,0,1)){
print(i)
}
for (i in seq(1,0,1)){
print(i)
}
print(i)
print(i)
for (i in seq(1,0,1)){
print(i)
} #seq를 이용해도 (시작, 최종, 증감)에서 모순인 부분을 보여주기 위한 오류문
for(i in c(1,3,5,7,9)){
print(i)
}
# 그래픽 기호
setwd("d:\Workspace\R_Data_Analysis\Part4")
# 그래픽 기호
setwd("D:\Workspace\R_Data_Analysis\Part4")
# 그래픽 기호
setwd("D:\Workspace\R_Data_Analysis\Part4")
# 그래픽 기호
setwd("D:\Workspace\R_Data_Analysis\Part4")
