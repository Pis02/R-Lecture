panel.grid.major.y = element_line(color="red", linetype = "dashed"))  #가로로 빨간석 점선(dashed)를 적용
ggplot(score,aes(x=영어,y=reorder(이름,영어))) +
geom_point(size=6) +
theme_bw()  + #theme_bw() -> R에서 미리 만들어져 있던 흑과 백 만을 가지고 있는 테마, theme_XX() 옵션이 더 있다.
theme(panel.grid.major.x = element_blank(), #panel.grid.major 배경화면 중에 간격을 나타내는 큰 선분
#element_balck() 옵션을 적용해, 선분을 안보이게 했다.
panel.grid.minor.x = element_blank(), #panel.grid.minor 큰 선분 사이에 있는 작은 선분
panel.grid.major.y = element_line(color="red", linetype = "dashed"))  #가로로 빨간석 점선(dashed)를 적용
#geom_point(), scatterplots
install.packages('gridExtra')
library(gridExtra)
library(gridExtra)
v_mt <- mtcars
m_mt
m_mt
mtcar
mtcasr
mtcars
mtcars
v_mt <- mtcars
mtcars
V_mt
V_mt
v_mt
graph1 <- ggplot(v_mt,aes(x=hp,y=mpg))
graph + geom_point()
graph1 + geom_point()
graph1 + geom_point()
graph1 <- ggplot(v_mt,aes(x=hp,y=displ))
graph1 + geom_point()
graph1 <- ggplot(v_mt,aes(x=hp,y=mpg))
graph1 + geom_point()
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point()
ggplot(v_mt,aes(x=hp,y=disp)) +
geom_point()
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(colour="blue")
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(colour="blus")
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(colour="blue")
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(colour=factor(am))
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(colour=factor(am))
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(aes(colour=factor(am)))
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(aes(colour=factor(am), size=5))
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(aes(colour=factor(am), size=wt))
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(aes(shape=factor(am), size=wt)) #size = wt 값 별로 다른 크기 지정하기
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(aes(shape=factor(am), size=wt)) #shape 종류별로 크기와 모양 지정하기기
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(aes(shape=factor(am), size=wt)) +
scale_color_manual(values=c("red","green"))
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(aes(shape=factor(am), size=wt)) +
scale_color_manual(values=c("red","green")) #종류별로 크기, 모양, 색상 지정하기
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(aes(shape=factor(am), size=wt)) #shape 종류별로 크기와 모양 지정하기기
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(aes(shape=factor(am), size=wt)) +
scale_color_manual(values=c("red","green")) #종류별로 크기, 모양, 색상 지정하기
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(aes(shape=factor(am), size=wt)) #shape 종류별로 크기와 모양 지정하기기
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(aes(shape=factor(am), size=wt)) +
scale_color_manual(values=c("red","green")) #종류별로 크기, 모양, 색상 지정하기
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(aes(shape=factor(am), size=wt)) #shape 종류별로 크기와 모양 지정하기기
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(aes(shape=factor(am), size=wt)) +
scale_color_manual(values=c("red","green")) #종류별로 크기, 모양, 색상 지정하기
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(aes(shape=factor(am),color=factor(am),size=wt)) +
scale_color_manual(values=c("red","green")) #종류별로 크기, 모양, 색상 지정하기
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(color="red") +
geom_line()
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(color="blue") +
labs(x="마력",y="연비(mile/gallon)")
ggplot(v_mt,aes(x=hp,y=mpg)) +
geom_point(color="red") +
geom_line(colour="blue") #선 추가하기
#geom_line()
three <- read.csv("학생별과목별성적_3기_3명.csv",header=T)
three
sort_score <- arrange(three,이름,과목)
sort_score
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름)) +
geom_line()
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름)) +
geom_line() +
geom_point()
geom_line() +
geom_point(size=6,shape=22)
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름,fill=이름)) +
geom_line() +
geom_point(size=6,shape=22)
geom_linetype()
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름,fill=이름)) +  #fill=이름 설정에 의해 네모칸이 색칠 되었고,
geom_line(linetype) + #linetype
geom_point(size=6,shape=22) #geom_point()에서 size와 포인터 모양을 shape 항목으로 지정
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름,fill=이름)) +  #fill=이름 설정에 의해 네모칸이 색칠 되었고,
geom_line() + #linetype = 선의 모양을 바꿀 수 있는 옵션
geom_point(size=6,shape=22) #geom_point()에서 size와 포인터 모양을 shape 항목으로 지정
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름,fill=이름)) +
geom_line() +
geom_point(size=6,shape=22) +
ggtitle("학생별 과목별 성적")
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름,fill=이름)) +
geom_line() +
geom_point(size=6,shape=22) +
ggtitle("학생별 과목별 성적") #그래프의 타이틀 제목 지정
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름,fill=이름)) +
geom_line() +
geom_point(size=6,shape=22) +
ggtitle("              학생별 과목별 성적") #그래프의 타이틀 제목 지정
ggplot(sort_score,aes(x=과목,y=점수,color=이름,group=이름,fill=이름)) +
geom_line() +
geom_point(size=6,shape=22) +
ggtitle("                                     학생별 과목별 성적") #그래프의 타이틀 제목 지정
#geom_area()
dis <- read.csv("1군전염병발병현황_년도별.csv", stringsAsFactors=F)
dis
ggplot(dis,aes(x=년도별,y=장티푸스,ground=1)) +
geom_line()
ggplot(dis,aes(x=년도별,y=장티푸스,group=1)) +
geom_line()
ggplot(dis,aes(x=년도별,y=장티푸스,group=1)) +
geom_area()
ggplot(dis,aes(x=년도별,y=장티푸스,group=1)) +
geom_area(color="red",fill="cyan",alpha=0.4)
geom_area(fill="cyan",alpha=0.4)
geom_area(fill="cyan",alpha=0.4)
ggplot(dis,aes(x=년도별,y=장티푸스,group=1)) +
geom_line() +
geom_area(fill="cyan",alpha=0.4)
ggplot(dis,aes(x=년도별,y=장티푸스,group=1)) +
geom_line("red") +
geom_area(fill="cyan",alpha=0.4)
ggplot(dis,aes(x=년도별,y=장티푸스,group=1)) +
geom_line(color="red") +
geom_area(fill="cyan",alpha=0.4)
ggplot(dis,aes(x=년도별,y=장티푸스,group=1)) +
geom_line(color="red") +
geom_area(fill="cyan",alpha=0.4)
# Anscombe's Quartet
# 기술통계량(평균(x), 평균(y), 분산(x), 분산(y), 상관계수, 회귀식)이 동일한 4개의 데이터 셋
anscombe
str(anscombe0)
str(anscombe)
ans_x_mean <- anscombe %>%
select(x1,x2,x3,x4) %>%
summarise_each(list(mean), x1, x2, x3, x4)
ans_x_mean
ans_y_mean <- anscombe %>%
select(y1,y2,3,y4) %>%
summarise_each(list(mean), y1, y2, y3, y4)
ans_y_mean <- anscombe %>%
select(y1,y2,3,y4) %>%
summarise_each(list(mean), y1, y2, y3, y4)
ans_y_mean <- anscombe %>%
select(y1,y2,y3,y4) %>%
summarise_each(list(mean), y1, y2, y3, y4)
ans_y_mean
ans_x_var <- anscombe %>%
select(x1,x2,x3,x4) %>%
summarise_each(list(mean), x1, x2, x3, x4)
ans_x_var
ans_y_var <- anscombe %>%
select(y1,y2,y3,y4) %>%
summarise_each(list(var), y1, y2, y3, y4)
ans_y_var
ans_x_var <- anscombe %>%
select(x1,x2,x3,x4) %>%
summarise_each(list(var), x1, x2, x3, x4)
ans_x_var
ans_y_var <- anscombe %>%
select(y1,y2,y3,y4) %>%
summarise_each(list(var), y1, y2, y3, y4)
ans_y_var
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(dplyr)
mpga
mpg
par(mfrow=c(1,1))
plot(mpg$cty, mpg$hwy,
xlab='cty(도시 연비)', ylab='hwy(고속도로 연비)',
main='mpg 데이터의 cty(도시 연비)와 hwy(고속도로 연비) 관계 산점도')
library(ggplot2)
#2번 문제
midwest
plot(midwest$poptotal, midwest$popasian,
xlab='poptotal(전체 인구)', ylab='popasian(아시아인 인구',
main='미국 지역별 전체 인구와 아시아인 인구 간에 관계 산점도')
plot(midwest$poptotal, midwest$popasian,
xlab='poptotal(전체 인구)', ylab='popasian(아시아인 인구',
main='미국 지역별 전체 인구와 아시아인 인구 간에 관계 산점도',
xlimit<=500000)
plot(midwest$poptotal, midwest$popasian,
xlab='poptotal(전체 인구)', ylab='popasian(아시아인 인구',
main='미국 지역별 전체 인구와 아시아인 인구 간에 관계 산점도',
xlim<=500000)
plot(midwest$poptotal, midwest$popasian,
xlab='poptotal(전체 인구)', ylab='popasian(아시아인 인구',
main='미국 지역별 전체 인구와 아시아인 인구 간에 관계 산점도',
xlim<=c(500000))
plot(midwest$poptotal, midwest$popasian,
xlab='poptotal(전체 인구)', ylab='popasian(아시아인 인구',
main='미국 지역별 전체 인구와 아시아인 인구 간에 관계 산점도',
xlim<=c(1,500000))
xlab='cty(도시 연비)', ylab='hwy(고속도로 연비)',
main='mpg 데이터의 cty(도시 연비)와 hwy(고속도로 연비) 관계 산점도')
ggplot(mpg, aes(x=cty(도시 연비),y=hwy(고속도로 연비)))
ggplot(mpg, aes(x=cty,y=hwy)
ggplot(mpg, aes(x=cty,y=hwy)
ggplot(mpg, aes(x=cty,y=hwy)
#mpg 데이터의 cty(도시 연비)와 hwy(고속도로 연비) 간에 어떤 관계가 있는지 알아보려고 합니다.
#x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요
#1번 문제
mpg
ggplot(mpg, aes(x=cty,y=hwy)
library(ggplot2)
ggplot(mpg, aes(x=cty,y=hwy)
ggplot(mpg, aes(x=cty,y=hwy))
ggplot(mpg, aes(x=cty,y=hwy))
ggplot(mpg, aes(x=cty,y=hwy))
ggplot(mpg, aes(x=cty,y=hwy)) +
geom_point()
ggplot(mpg, aes(x=cty,y=hwy)) +
geom_point()
ggplot(mpg, aes(x=cty(도시 연비),y=hwy)) +
geom_point()
ggplot(mpg, aes(x=cty(도시 연비),y=hwy)) +
geom_point()
ggplot(mpg, aes(x=cty,y=hwy)) +
geom_point()
ggplot(mpg, aes(x='cty(도시연비)',y=hwy)) +
geom_point()
ggplot(mpg, aes(x=cty,y=hwy)) +
geom_point()
ggplot(mpg, aes(x=cty,y=hwy)) +
geom_point()
#2번 문제
midwest
geom_point()
geom_point()
ggplot(midwest, aes(x=poptotal,y=popasian) +
geom_point())
ggplot(midwest, aes(x=poptotal,y=popasian)) +
geom_point()
ggplot(midwest, aes(x=poptotal,y=popasian)) +
geom_point() +
xlim(1,500000) + ylim(1,10000)
ggplot(midwest, aes(x=poptotal,y=popasian)) +
geom_point() +
xlim(1,500000) + ylim(1,10000)
ggplot(midwest, aes(x=poptotal,y=popasian)) +
geom_point() +
xlim(0,500000) + ylim(0,10000)
ggplot(midwest, aes(x=poptotal,y=popasian)) +
geom_point() +
xlim(0,500000) + ylim(0,10000)
ggplot(midwest, aes(x=poptotal,y=popasian)) +
geom_point() +
xlim(0,500000) + ylim(0,10000)
ggplot(midwest, aes(x=poptotal,y=popasian)) +
geom_point() +
xlim(0,500000) + ylim(0,10000)
ggplot(midwest, aes(x=poptotal,y=popasian)) +
geom_point() +
xlim(0,50000) + ylim(0,10000)
ggplot(midwest, aes(x=poptotal,y=popasian)) +
geom_point() +
xlim(0,50000) + ylim(0,1000)
ggplot(midwest, aes(x=poptotal,y=popasian)) +
geom_point() +
xlim(0,500000) + ylim(0,10000)
#어떤 회사에서 생산한 "suv" 차종의 도시 연비가 높은지 알아보려고 합니다. "suv" 차종을 대상으로 평균 cty(도시 연비)가
#가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.
#3번 문제
mpg
#어떤 회사에서 생산한 "suv" 차종의 도시 연비가 높은지 알아보려고 합니다. "suv" 차종을 대상으로 평균 cty(도시 연비)가
#가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.
#3번 문제
mpg
View(mpg)
ggplot(mpg, aes(x=class$suv,y=cty)) +
geom_point()
ggplot(mpg, aes(x=class$suv,y=cty)) +
geom_point()
company <- mpg %>%
filter(class=='suv') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head(5)
ggplot(company, aes(x=manufacturer, mean_cty), y=mean_cty) +
geom_bar()
ggplot(company, aes(x=manufacturer, mean_cty), y=mean_cty) +
geom_bar()
ggplot(company, aes(x=manufacturer, mean_cty), y=mean_cty) +
geom_bar(stat='identity')
ggplot(company, aes(x=manufacturer, mean_cty), y=mean_cty) +
geom_bar(stat='identity')
ggplot(company, aes(x=manufacturer, mean_cty), y=mean_cty) +
geom_bar(stat='i')
ggplot(company, aes(x=manufacturer, mean_cty), y=mean_cty) +
geom_bar(stat='identity')
ggplot(company, aes(x=manufacturer, mean_cty), y=-mean_cty) +
geom_bar(stat='identity')
ggplot(company, aes(x=manufacturer, mean_cty), y=mean_cty) +
geom_bar(stat='identity')
ggplot(company, aes(x=manufacturer, mean_cty), y=mean_cty) +
geom_bar(stat='identity')
sort_kem
ggplot(company, aes(x=manufacturer, mean_cty), y=mean_cty) +
geom_bar(stat='identity') +
reverse=T
ggplot(company, aes(x=manufacturer, mean_cty), y=mean_cty, reverse=T) +
geom_bar(stat='identity') +
ggplot(company, aes(x=manufacturer, mean_cty), y=mean_cty, reverse=T) +
geom_bar(stat='identity')
ggplot(company, aes(x=manufacturer, mean_cty), y=mean_cty) +
geom_bar(stat='identity')
ggplot(company, aes(x=manufacturer, mean_cty), y=mean_cty) +
geom_bar(stat='identity')
ggplot(company, aes(x=reorder(manufacturer, mean_cty), y=mean_cty)) +
geom_bar(stat='identity')
ggplot(company, aes(x=reorder(manufacturer, mean_cty), y=-mean_cty)) +
geom_bar(stat='identity')
ggplot(company, aes(x=reorder(manufacturer, mean_cty), y=mean_cty)) +
geom_bar(stat='identity')
ggplot(company, aes(x=reorder(manufacturer, -mean_cty), y=mean_cty)) +
geom_bar(stat='identity')
ggplot(mpg, aes(x=class))
ggplot(mpg, aes(x=class)) +
geom_bar()
#economics 데이터를 이용해서 psavert(개인 저축률)가 시간에 따라서 어떻게 변해왔는지 알아보려고 합니다.
#시간에 따른 개인 저축률의 변화를 나타낸 시계열 그래프를 만들어 보세요.
#5번 문제
economics
ggplot(economics, aes(x=data, y=psavert))
ggplot(economics, aes(x=data, y=psavert)) +
geom_line()
ggplot(economics, aes(x=data, y=psavert)) +
geom_line()
#economics 데이터를 이용해서 psavert(개인 저축률)가 시간에 따라서 어떻게 변해왔는지 알아보려고 합니다.
#시간에 따른 개인 저축률의 변화를 나타낸 시계열 그래프를 만들어 보세요.
#5번 문제
economics
ggplot(economics, aes(x=data, y=psavert)) +
geom_line()
economics <- as.data.frame(ggplot2 :: economics)
ggplot(economics, aes(x=data, y=psavert)) +
geom_line()
ggplot(economics, aes(x=data, y=psavert))
ggplot(economics, aes(x=data, y=psavert))
#economics 데이터를 이용해서 psavert(개인 저축률)가 시간에 따라서 어떻게 변해왔는지 알아보려고 합니다.
#시간에 따른 개인 저축률의 변화를 나타낸 시계열 그래프를 만들어 보세요.
#5번 문제
economics
ggplot(economics, aes(x=data, y=psavert))
ggplot(economics, aes(x=date, y=psavert))
ggplot(economics, aes(x=date, y=psavert)) +
geom_line()
#class(자동차 종류)가 "compact", "subcompact", "suv"인 자동차의 cty(도시 연비)가 어떻게 다른지 비교해보려고 합니다.
#세 차종의 cty를 나타낸 상자 그림을 만들어보세요.
#6번 문제
mpg
car <- mpg %>%
filter(class=='suv') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head(5)
car <- mpg %>%
filter(class=='compact', 'subcompact', 'suv') %>%
car <- mpg %>%
filter(class=='compact', 'subcompact', 'suv')
car <- mpg %>%
filter(class=='compact'||'subcompact'||'suv')
ggplot(car, aes(x=car,y=cty)) +
geom_boxplot()
car <- mpg %>%
filter(class%in% c('compact','subcompact','suv'))
ggplot(car, aes(x=car,y=cty)) +
geom_boxplot()
ggplot(car, aes(x=cla,y=cty)) +
geom_boxplot()
ggplot(car, aes(x=class,y=cty)) +
geom_boxplot()
car <- mpg %>%
filter(class%in% c('compact','subcompact','suv'))
ggplot(car, aes(x=class,y=cty)) +
geom_boxplot()
#Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요. 단, 컬러, 제목, x축, y축 등 그래프를 예쁘게 작성하세요.
#cut의 돗수를 보여주는 그래프를 작성하세요.
#7-1번 문제
diamonds
#Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요. 단, 컬러, 제목, x축, y축 등 그래프를 예쁘게 작성하세요.
#cut의 돗수를 보여주는 그래프를 작성하세요.
#7-1번 문제
diamonds
ggplot(diamonds, aes(x=cut, fill=cut)) +
geom_bar()
#cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
#7-2번 문제
df_cut <- diamonds %>%
group_by(cut) %>%
summarise(mean_price = mean(price))
ggplot(df_cut, aes(x=cut,y-mean_price,fill=cut)) +
geom_bar()
ggplot(df_cut, aes(x=cut,y=mean_price,fill=cut)) +
geom_bar()
#cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
#7-2번 문제
df_cut <- diamonds %>%
group_by(cut) %>%
summarise(mean_price = mean(price))
ggplot(df_cut, aes(x=cut,y=mean_price,fill=cut)) +
geom_bar()
#cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
#7-2번 문제
df_cut <- diamonds %>%
group_by(cut) %>%
summarise(mean_price = mean(price))
ggplot(df_cut, aes(x=cut,y=mean_price,fill=cut)) +
geom_bar()
ggplot(diamonds, aes(x=cut, fill=cut)) +
geom_bar()
ggplot(df_cut, aes(x=cut,y=mean_price,fill=cut)) +
geom_bar()
ggplot(df_cut, aes(x=cut,y=mean_price,fill=cut)) +
geom_bar(stat='identity')
ggplot(diamonds, aes(x=cut, fill=cut)) +
geom_bar()
ggplot(df_cut, aes(x=cut,y=mean_price,fill=cut)) +
geom_bar(stat='identity')
ggplot(diamonds, aes(x=price)) +
geom_histogram(bins=10) +
facet_wrap(-cut + color)
ggplot(diamonds, aes(x=price)) +
geom_histogram(bins=10) +
facet_wrap(-cut + color)
ggplot(diamonds, aes(x=price)) +
geom_histogram(bins=10) +
facet_wrap(-cut + color)
diamonds
ggplot(diamonds, aes(x=price)) +
geom_histogram(bins=10) +
facet_wrap(-cut + color)
ggplot(diamonds, aes(x=price)) +
geom_histogram(bins=10) +
facet_wrap(cut + color)
ggplot(diamonds, aes(x=price)) +
geom_histogram(bins=10) +
facet_wrap(cut + colours)
ggplot(diamonds, aes(x=price)) +
geom_histogram(bins=10) +
facet_wrap(cut + colour)
ggplot(diamonds, aes(x=price)) +
geom_histogram(bins=10) +
facet_wrap(cut + color)
#cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
#7-3번 문제
df_color <- diamonds %>%
group_by(color) %>%
summarise(mean_price = mean(price))
#이런 방법도 있다.
diamonds
ggplot(diamonds, aes(x=price)) +
geom_histogram(bins=10) +
facet_wrap(cut + color)
library(dplyr)
library(ggplot2)
#이런 방법도 있다.
diamonds
ggplot(diamonds, aes(x=price)) +
geom_histogram(bins=10) +
facet_wrap(cut + color)
#cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
#7-3번 문제
df_color <- diamonds %>%
group_by(color) %>%
summarise(mean_price = mean(price))
ggplot(df_cut, aes(x=cut,y=mean_price,fill=cut)) +
geom_bar(stat='identity')
gcut <- ggplot(df_cut, aes(x=cut, y=mean_price, fill=cut)) +
geom_col()
library(grid)
library(gridExtra)
grid.arrange(gcut, gcolor, ncol=2, top = "cut과 color에 따른 가격의 변화")
grid.arrange(gcut, gcolor, ncol=2, top = "cut과 color에 따른 가격의 변화")
grid.arrange(gcut, gcolor, ncol=2, top = "cut과 color에 따른 가격의 변화")
gcolor <- ggplot(df_color, aes(x=color, y=mean_price, fill=color)) +
geom_col()
gcut <- ggplot(df_cut, aes(x=cut, y=mean_price, fill=cut)) +
geom_col()
grid.arrange(gcut, gcolor, ncol=2, top = "cut과 color에 따른 가격의 변화")
#이런 방법도 있다.
ggplot(diamonds, aes(x=price)) +
geom_histogram(bins=10) +
facet_wrap(~cut + color)
